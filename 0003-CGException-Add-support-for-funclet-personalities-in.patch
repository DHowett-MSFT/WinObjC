From efb007537347207b27b1caf01e3d4f8c2141bbdc Mon Sep 17 00:00:00 2001
From: "Dustin L. Howett" <duhowett@microsoft.com>
Date: Sun, 21 Jan 2018 23:29:47 -0800
Subject: [PATCH 03/13] [CGException] Add support for funclet personalities in
 finally

---
 lib/CodeGen/CGException.cpp | 23 ++++++++++++++++++++++-
 1 file changed, 22 insertions(+), 1 deletion(-)

diff --git a/lib/CodeGen/CGException.cpp b/lib/CodeGen/CGException.cpp
index 0e257ac779..6b55ce14f8 100644
--- a/lib/CodeGen/CGException.cpp
+++ b/lib/CodeGen/CGException.cpp
@@ -1265,6 +1265,21 @@ void CodeGenFunction::FinallyInfo::exit(CodeGenFunction &CGF) {
 
     llvm::Value *exn = nullptr;
 
+    llvm::CatchPadInst *CPI = nullptr;
+    SaveAndRestore<llvm::Instruction *> RestoreCurrentFuncletPad(
+        CGF.CurrentFuncletPad);
+
+    if (EHPersonality::get(CGF).usesFuncletPads()) {
+      // Capture the caught exception off the catchpad into the existing
+      // exn slot
+      CPI = cast<llvm::CatchPadInst>(catchBB->getFirstNonPHI());
+
+      CGF.CurrentFuncletPad = CPI;
+
+      if (SavedExnVar || BeginCatchFn)
+        CPI->setArgOperand(2, CGF.getExceptionSlot().getPointer());
+    }
+
     // If there's a begin-catch function, call it.
     if (BeginCatchFn) {
       exn = CGF.getExceptionFromSlot();
@@ -1280,7 +1295,13 @@ void CodeGenFunction::FinallyInfo::exit(CodeGenFunction &CGF) {
     // Tell the cleanups in the finally block that we're do this for EH.
     CGF.Builder.CreateFlagStore(true, ForEHVar);
 
-    // Thread a jump through the finally cleanup.
+    // Thread a jump through the finally cleanup (and catchret, if required)
+    if (CPI) {
+      llvm::BasicBlock *BB = CGF.createBasicBlock("catchret.dest");
+      CGF.Builder.CreateCatchRet(CPI, BB);
+      CGF.EmitBlock(BB);
+    }
+
     CGF.EmitBranchThroughCleanup(RethrowDest);
 
     CGF.Builder.restoreIP(savedIP);
-- 
2.15.1.gvfs.2.39.g03d366a

